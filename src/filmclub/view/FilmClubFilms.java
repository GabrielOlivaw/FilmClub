/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package filmclub.view;

import filmclub.controller.Controller;
import filmclub.controller.FilmsController;
import filmclub.model.Film;
import filmclub.model.Language;
import filmclub.observer.ViewObserver;
import java.awt.Component;
import java.math.BigDecimal;
import java.math.MathContext;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Objects;
import java.util.function.Predicate;
import java.util.stream.Collectors;
import javax.swing.DefaultComboBoxModel;
import javax.swing.UIManager;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import static org.apache.commons.lang3.StringUtils.containsIgnoreCase;

/**
 *
 * @author gabag
 */
public class FilmClubFilms extends javax.swing.JFrame implements ViewObserver<Film> {

    private static FilmClubFilms singleWindow = null;

    private FilmsController controller = null;

    private FilmClubFilmsTableModel filmsTableModel;
    private FilmClubFilmsComboBoxModel filmsComboBoxModel;

    private ModifyMode modifyMode = ModifyMode.NORMAL_MODE;

    /**
     * Creates new form FilmClubFilms
     */
    private FilmClubFilms() {
        initComponents();
    }

    private FilmClubFilms(FilmsController controller) {
        initComponents();
        this.controller = controller;
    }

    public static FilmClubFilms getInstance() {
        if (singleWindow == null) {
            singleWindow = new FilmClubFilms();
        }
        return singleWindow;
    }

    public Controller getController() {
        return this.controller;
    }

    public void setController(FilmsController controller) {
        this.controller = controller;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        filterPanel = new javax.swing.JPanel();
        filterLabel = new javax.swing.JLabel();
        filterComboBox = new javax.swing.JComboBox<>();
        filmIdFilterLabel = new javax.swing.JLabel();
        filterButton = new javax.swing.JButton();
        filmIdFilterSpinner = new javax.swing.JSpinner();
        filmTitleFilterLabel = new javax.swing.JLabel();
        filmTitleFilterTextField = new javax.swing.JTextField();
        tablesPanel = new javax.swing.JPanel();
        filmsScrollPane = new javax.swing.JScrollPane();
        filmsTable = new javax.swing.JTable();
        filmsTableLabel = new javax.swing.JLabel();
        buttonsFilmsPanel = new javax.swing.JPanel();
        addFilmButton = new javax.swing.JButton();
        editFilmButton = new javax.swing.JButton();
        deleteFilmButton = new javax.swing.JButton();
        confirmButtonsFilmsPanel = new javax.swing.JPanel();
        acceptButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        filmDetailsPanel = new javax.swing.JPanel();
        filmTitleLabel = new javax.swing.JLabel();
        filmTitleTextField = new javax.swing.JTextField();
        filmLanguageLabel = new javax.swing.JLabel();
        filmLanguageComboBox = new javax.swing.JComboBox<>();
        filmRentalDurationLabel = new javax.swing.JLabel();
        filmRentalDurationSpinner = new javax.swing.JSpinner();
        filmRentalRateLabel = new javax.swing.JLabel();
        filmRentalRateSpinner = new javax.swing.JSpinner();
        filmReplacementCostLabel = new javax.swing.JLabel();
        filmReplacementCostSpinner = new javax.swing.JSpinner();
        filmReleaseYearTitle = new javax.swing.JLabel();
        filmReleaseYearSpinner = new javax.swing.JSpinner();
        filmLengthLabel = new javax.swing.JLabel();
        filmLengthSpinner = new javax.swing.JSpinner();
        filmDetailsLabel = new javax.swing.JLabel();
        filmDetailsScrollPane = new javax.swing.JScrollPane();
        filmDetailsTextArea = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("FilmClub Actors");
        setResizable(false);
        setSize(new java.awt.Dimension(750, 400));

        filterLabel.setText("Filter");

        filterComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Film ID", "Title" }));
        filterComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterComboBoxActionPerformed(evt);
            }
        });

        filmIdFilterLabel.setText("Film ID");

        filterButton.setText("Filter");
        filterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterButtonActionPerformed(evt);
            }
        });

        filmIdFilterSpinner.setModel(new javax.swing.SpinnerNumberModel((short)1, (short)0, null, (short)1));

        filmTitleFilterLabel.setText("Film title");

        javax.swing.GroupLayout filterPanelLayout = new javax.swing.GroupLayout(filterPanel);
        filterPanel.setLayout(filterPanelLayout);
        filterPanelLayout.setHorizontalGroup(
            filterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(filterPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(filterLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(filterComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(filmIdFilterLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(filmIdFilterSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(filmTitleFilterLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(filmTitleFilterTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(filterButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        filterPanelLayout.setVerticalGroup(
            filterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(filterPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(filterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(filterPanelLayout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addComponent(filterLabel))
                    .addGroup(filterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(filmTitleFilterTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(filmTitleFilterLabel)
                        .addComponent(filterButton))
                    .addGroup(filterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(filterComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(filmIdFilterLabel)
                        .addComponent(filmIdFilterSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        filmsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Film ID", "Title"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Short.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        filmsTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        filmsScrollPane.setViewportView(filmsTable);
        if (filmsTable.getColumnModel().getColumnCount() > 0) {
            filmsTable.getColumnModel().getColumn(0).setResizable(false);
            filmsTable.getColumnModel().getColumn(0).setPreferredWidth(10);
            filmsTable.getColumnModel().getColumn(1).setResizable(false);
        }

        filmsTableLabel.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        filmsTableLabel.setText("Films");

        addFilmButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/images/buttons/buttonAdd.png"))); // NOI18N
        addFilmButton.setToolTipText("Add");
        addFilmButton.setBorder(null);
        addFilmButton.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                addFilmButtonStateChanged(evt);
            }
        });
        addFilmButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addFilmButtonActionPerformed(evt);
            }
        });

        editFilmButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/images/buttons/buttonEdit.png"))); // NOI18N
        editFilmButton.setToolTipText("Edit selected");
        editFilmButton.setBorder(null);
        editFilmButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editFilmButtonActionPerformed(evt);
            }
        });

        deleteFilmButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/images/buttons/buttonDelete.png"))); // NOI18N
        deleteFilmButton.setToolTipText("Delete selected");
        deleteFilmButton.setBorder(null);
        deleteFilmButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteFilmButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout buttonsFilmsPanelLayout = new javax.swing.GroupLayout(buttonsFilmsPanel);
        buttonsFilmsPanel.setLayout(buttonsFilmsPanelLayout);
        buttonsFilmsPanelLayout.setHorizontalGroup(
            buttonsFilmsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(buttonsFilmsPanelLayout.createSequentialGroup()
                .addComponent(addFilmButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(editFilmButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(deleteFilmButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        buttonsFilmsPanelLayout.setVerticalGroup(
            buttonsFilmsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, buttonsFilmsPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(buttonsFilmsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(editFilmButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deleteFilmButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addFilmButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        acceptButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/images/buttons/buttonAccept.png"))); // NOI18N
        acceptButton.setToolTipText("Accept");
        acceptButton.setBorder(null);
        acceptButton.setEnabled(false);
        acceptButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                acceptButtonActionPerformed(evt);
            }
        });

        cancelButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/images/buttons/buttonCancel.png"))); // NOI18N
        cancelButton.setToolTipText("Cancel");
        cancelButton.setBorder(null);
        cancelButton.setEnabled(false);
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout confirmButtonsFilmsPanelLayout = new javax.swing.GroupLayout(confirmButtonsFilmsPanel);
        confirmButtonsFilmsPanel.setLayout(confirmButtonsFilmsPanelLayout);
        confirmButtonsFilmsPanelLayout.setHorizontalGroup(
            confirmButtonsFilmsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(confirmButtonsFilmsPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(acceptButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        confirmButtonsFilmsPanelLayout.setVerticalGroup(
            confirmButtonsFilmsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(confirmButtonsFilmsPanelLayout.createSequentialGroup()
                .addGroup(confirmButtonsFilmsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(acceptButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cancelButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout tablesPanelLayout = new javax.swing.GroupLayout(tablesPanel);
        tablesPanel.setLayout(tablesPanelLayout);
        tablesPanelLayout.setHorizontalGroup(
            tablesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tablesPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tablesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(filmsScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(tablesPanelLayout.createSequentialGroup()
                        .addComponent(filmsTableLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonsFilmsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tablesPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(confirmButtonsFilmsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        tablesPanelLayout.setVerticalGroup(
            tablesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tablesPanelLayout.createSequentialGroup()
                .addGroup(tablesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(filmsTableLabel)
                    .addGroup(tablesPanelLayout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(buttonsFilmsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(filmsScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(confirmButtonsFilmsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        filmTitleLabel.setText("Title");

        filmTitleTextField.setEnabled(false);

        filmLanguageLabel.setText("Language");

        filmLanguageComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "English" }));
        filmLanguageComboBox.setEnabled(false);

        filmRentalDurationLabel.setText("Rental duration");

        filmRentalDurationSpinner.setModel(new javax.swing.SpinnerNumberModel(Byte.valueOf((byte)0), Byte.valueOf((byte)0), Byte.valueOf((byte)127), Byte.valueOf((byte)1)));
        filmRentalDurationSpinner.setEnabled(false);

        filmRentalRateLabel.setText("Rental rate");

        filmRentalRateSpinner.setModel(new javax.swing.SpinnerNumberModel(0.0d, 0.0d, 99.99d, 0.01d));
        filmRentalRateSpinner.setEditor(new javax.swing.JSpinner.NumberEditor(filmRentalRateSpinner, "##.##"));
        filmRentalRateSpinner.setEnabled(false);

        filmReplacementCostLabel.setText("Replacement cost");

        filmReplacementCostSpinner.setModel(new javax.swing.SpinnerNumberModel(0.0d, 0.0d, 999.99d, 0.01d));
        filmReplacementCostSpinner.setEditor(new javax.swing.JSpinner.NumberEditor(filmReplacementCostSpinner, "###.##"));
        filmReplacementCostSpinner.setEnabled(false);

        filmReleaseYearTitle.setText("Release year");

        filmReleaseYearSpinner.setModel(new javax.swing.SpinnerNumberModel(1901, 1901, 2155, 1));
        filmReleaseYearSpinner.setEnabled(false);

        filmLengthLabel.setText("Length");

        filmLengthSpinner.setModel(new javax.swing.SpinnerNumberModel((short)0, (short)0, null, (short)1));
        filmLengthSpinner.setEnabled(false);

        filmDetailsLabel.setText("Details");

        filmDetailsTextArea.setColumns(20);
        filmDetailsTextArea.setLineWrap(true);
        filmDetailsTextArea.setRows(5);
        filmDetailsTextArea.setWrapStyleWord(true);
        filmDetailsTextArea.setEnabled(false);
        filmDetailsScrollPane.setViewportView(filmDetailsTextArea);

        javax.swing.GroupLayout filmDetailsPanelLayout = new javax.swing.GroupLayout(filmDetailsPanel);
        filmDetailsPanel.setLayout(filmDetailsPanelLayout);
        filmDetailsPanelLayout.setHorizontalGroup(
            filmDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(filmDetailsPanelLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(filmDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(filmLanguageLabel)
                    .addComponent(filmTitleLabel)
                    .addComponent(filmDetailsLabel)
                    .addComponent(filmLengthLabel)
                    .addComponent(filmReleaseYearTitle))
                .addGap(18, 18, 18)
                .addGroup(filmDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(filmDetailsPanelLayout.createSequentialGroup()
                        .addGroup(filmDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(filmTitleTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(filmReleaseYearSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(filmLengthSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(filmLanguageComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(filmDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(filmReplacementCostLabel)
                            .addComponent(filmRentalRateLabel)
                            .addComponent(filmRentalDurationLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(filmDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(filmReplacementCostSpinner)
                            .addComponent(filmRentalRateSpinner)
                            .addComponent(filmRentalDurationSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(filmDetailsScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(34, Short.MAX_VALUE))
        );
        filmDetailsPanelLayout.setVerticalGroup(
            filmDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(filmDetailsPanelLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(filmDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(filmDetailsPanelLayout.createSequentialGroup()
                        .addGroup(filmDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(filmTitleTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(filmTitleLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(filmDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(filmReleaseYearTitle)
                            .addComponent(filmReleaseYearSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(filmDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(filmLengthLabel)
                            .addComponent(filmLengthSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(filmDetailsPanelLayout.createSequentialGroup()
                        .addGroup(filmDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(filmRentalDurationLabel)
                            .addComponent(filmRentalDurationSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(filmDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(filmRentalRateLabel)
                            .addComponent(filmRentalRateSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(filmDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(filmReplacementCostLabel)
                            .addComponent(filmReplacementCostSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(filmDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(filmLanguageLabel)
                    .addComponent(filmLanguageComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(filmDetailsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(filmDetailsScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(filmDetailsLabel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(filterPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(tablesPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(filmDetailsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(filterPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(filmDetailsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(tablesPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void showRow(int pos) {
        filmsTable.setRowSelectionInterval(pos, pos);
        filmsTable.scrollRectToVisible(filmsTable.getCellRect(pos, 1, true));
    }

    private void addFilmButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addFilmButtonActionPerformed
        // TODO add your handling code here:

        modifyMode = ModifyMode.ADD_MODE;
        setEditingMode(true);
        enableDetailsFields(true);

        filmsTableModel.addFilm(controller.getNewFilm());

        int lastPos = filmsTableModel.getFilms().size() - 1;
        
        filmsTableModel.setTemporalFilm(lastPos);
    }//GEN-LAST:event_addFilmButtonActionPerformed

    private void editFilmButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editFilmButtonActionPerformed
        // TODO add your handling code here:
        if (filmsTable.getSelectedRow() != -1) {
            modifyMode = ModifyMode.EDIT_MODE;
            setEditingMode(true);
            enableDetailsFields(true);
            
            showRow(filmsTable.getSelectedRow());
            

            filmsTableModel.setTemporalFilm(filmsTable.getSelectedRow());
        }
    }//GEN-LAST:event_editFilmButtonActionPerformed

    private void deleteFilmButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteFilmButtonActionPerformed
        // TODO add your handling code here:
        if (filmsTable.getSelectedRow() != -1) {
            modifyMode = ModifyMode.DELETE_MODE;
            setEditingMode(true);

            int pos = filmsTable.getSelectedRow();
            showRow(pos);

            filmsTableModel.setTemporalFilm(filmsTableModel.getFilmAt(pos), pos);
            filmsTableModel.removeFilm(pos);
        }
    }//GEN-LAST:event_deleteFilmButtonActionPerformed

    private void acceptButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_acceptButtonActionPerformed
        // TODO add your handling code here:

        setEditingMode(false);
        
        Film film;

        switch (modifyMode) {
            case ADD_MODE:
                enableDetailsFields(false);
                saveFieldChanges();
                
                film = filmsTableModel.getFilmAt(filmsTableModel.getFilms().size() - 1);
                filmsTableModel.rollback(modifyMode);
                controller.addEntity(film);
                break;
            case EDIT_MODE:
                enableDetailsFields(false);
                saveFieldChanges();
                
                film = filmsTableModel.getFilmAt(filmsTable.getSelectedRow());
                controller.updateEntity(film);
                break;
            case DELETE_MODE:
                film = filmsTableModel.getTemporalFilm();
                controller.deleteEntity(film);
                break;
        }
        
        /*
        IMPORTANT!! If you press the Accept button while editing the selected 
        row, it stays in editing mode, allowing you to change its content even 
        if the model has already registered that particular cell as not editable. 
        
        We have to fire the editingCanceled event programatically to prevent that.
        */
        filmsTable.editingCanceled(null);

        modifyMode = ModifyMode.NORMAL_MODE;
    }//GEN-LAST:event_acceptButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        // TODO add your handling code here:

        setEditingMode(false);
        
        if (modifyMode != ModifyMode.NORMAL_MODE) {
            filmsTableModel.rollback(modifyMode);
            if (modifyMode != ModifyMode.DELETE_MODE)
                enableDetailsFields(false);
        }

        /*
        IMPORTANT!! If you press the Cancel button while editing the selected 
        row, it stays in editing mode, allowing you to change its content even 
        if the model has already registered that particular cell as not editable. 
        
        We have to fire the editingCanceled event programatically to prevent that.
        */
        filmsTable.editingCanceled(null);
        
        modifyMode = ModifyMode.NORMAL_MODE;

    }//GEN-LAST:event_cancelButtonActionPerformed

    private void saveFieldChanges() {
        Film f = filmsTableModel.getFilmAt(filmsTable.getSelectedRow());
        
        f.setTitle(filmTitleTextField.getText());
        f.setReleaseYear((int)filmReleaseYearSpinner.getValue());
        
        f.setLength((Short)filmLengthSpinner.getValue());
        f.setLanguageByLanguageId(filmsComboBoxModel.getLanguageAt(filmLanguageComboBox.getSelectedIndex()));
        f.setRentalDuration((byte) filmRentalDurationSpinner.getValue());
        
        //double rentalRate = (double)filmRentalRateSpinner.getValue();
        //f.setRentalRate(BigDecimal.valueOf(rentalRate));
        f.setRentalRate((BigDecimal)filmRentalRateSpinner.getValue());
        //double replacementCost = (double) filmReplacementCostSpinner.getValue();
        //f.setReplacementCost(BigDecimal.valueOf(replacementCost));
        f.setReplacementCost((BigDecimal)filmReplacementCostSpinner.getValue());
        f.setDescription(filmDetailsTextArea.getText());
        
    }
    
    private boolean filterFilmId(Film f) {
        return Objects.equals(f.getFilmId(), filmIdFilterSpinner.getValue());
    }

    /**
     * Filters Actors by a certain Film title on which they appear.
     * 
     * @param t
     * @return 
     */
    private boolean filterFilmTitle(Film f) {
        return containsIgnoreCase(f.getTitle(), filmTitleFilterTextField.getText());
    }
    
    /**
     * Applies the selected filter from the combo box to the actors table, using
     * the content of the filter text fields. The Actor ID is an exclusive
     * filter, meaning it is unique to each Actor, so it isn't used when
     * applying the "All" filter.
     *
     * @param evt
     */
    private void filterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filterButtonActionPerformed
        // TODO add your handling code here:

        Predicate<Film> filter = null;

        // filterComboBox filters
        switch (filterComboBox.getSelectedIndex()) {
            case 0:
                filter = (Film f) -> filterFilmId(f);
                break;
            case 1:
                filter = (Film f) -> filterFilmTitle(f);
                break;
            default:
                break;
        }

        if (filter != null) {
            filmsTableModel.setFilms(controller.getFilms().stream().filter(filter).collect(Collectors.toList()));
        }
    }//GEN-LAST:event_filterButtonActionPerformed

    /**
     * Disables the Actor ID input field if the "All" filter is selected.
     *
     * @param evt
     */
    private void filterComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filterComboBoxActionPerformed
        // TODO add your handling code here:

        switch (filterComboBox.getSelectedIndex()) {
            case 0:
                filmIdFilterSpinner.setEnabled(true);
                break;
            case 3:
                filmIdFilterSpinner.setEnabled(false);
                break;
            default:
                break;
        }
    }//GEN-LAST:event_filterComboBoxActionPerformed

    /**
     * 
     * This method responds to the need of selecting the newly added film to the 
     * table. In the addFilmButtonActionPerformed event handler is not possible 
     * to select the new table row because the window focus is locked in the add 
     * button being pressed, so we have to handle the StateChanged event directly.
     * Whether the add button is pressed via mouse or keyboard, selects the 
     * created film in the table.
     * 
     * @param evt 
     */
    private void addFilmButtonStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_addFilmButtonStateChanged
        // TODO add your handling code here:
        if (modifyMode == ModifyMode.ADD_MODE && !addFilmButton.getModel().isPressed()) {
            int lastPos = filmsTableModel.getFilms().size() - 1;
            showRow(lastPos);
        }
    }//GEN-LAST:event_addFilmButtonStateChanged

    private void enableDetailsFields(boolean b) {
        
        for (Component c: filmDetailsPanel.getComponents())
            c.setEnabled(b);
        filmDetailsTextArea.setEnabled(b);
    }
    
    private void setEditingMode(boolean b) {
        for (Component c: filterPanel.getComponents())
            c.setEnabled(!b);
        
        for (Component c: buttonsFilmsPanel.getComponents())
            c.setEnabled(!b);

        for (Component c: confirmButtonsFilmsPanel.getComponents())
            c.setEnabled(b);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FilmClubFilms.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FilmClubFilms.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FilmClubFilms.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FilmClubFilms.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FilmClubFilms().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton acceptButton;
    private javax.swing.JButton addFilmButton;
    private javax.swing.JPanel buttonsFilmsPanel;
    private javax.swing.JButton cancelButton;
    private javax.swing.JPanel confirmButtonsFilmsPanel;
    private javax.swing.JButton deleteFilmButton;
    private javax.swing.JButton editFilmButton;
    private javax.swing.JLabel filmDetailsLabel;
    private javax.swing.JPanel filmDetailsPanel;
    private javax.swing.JScrollPane filmDetailsScrollPane;
    private javax.swing.JTextArea filmDetailsTextArea;
    private javax.swing.JLabel filmIdFilterLabel;
    private javax.swing.JSpinner filmIdFilterSpinner;
    private javax.swing.JComboBox<String> filmLanguageComboBox;
    private javax.swing.JLabel filmLanguageLabel;
    private javax.swing.JLabel filmLengthLabel;
    private javax.swing.JSpinner filmLengthSpinner;
    private javax.swing.JSpinner filmReleaseYearSpinner;
    private javax.swing.JLabel filmReleaseYearTitle;
    private javax.swing.JLabel filmRentalDurationLabel;
    private javax.swing.JSpinner filmRentalDurationSpinner;
    private javax.swing.JLabel filmRentalRateLabel;
    private javax.swing.JSpinner filmRentalRateSpinner;
    private javax.swing.JLabel filmReplacementCostLabel;
    private javax.swing.JSpinner filmReplacementCostSpinner;
    private javax.swing.JLabel filmTitleFilterLabel;
    private javax.swing.JTextField filmTitleFilterTextField;
    private javax.swing.JLabel filmTitleLabel;
    private javax.swing.JTextField filmTitleTextField;
    private javax.swing.JScrollPane filmsScrollPane;
    private javax.swing.JTable filmsTable;
    private javax.swing.JLabel filmsTableLabel;
    private javax.swing.JButton filterButton;
    private javax.swing.JComboBox<String> filterComboBox;
    private javax.swing.JLabel filterLabel;
    private javax.swing.JPanel filterPanel;
    private javax.swing.JPanel tablesPanel;
    // End of variables declaration//GEN-END:variables

    /**
     *
     * Adds a selection listener to the table, allowing to recover the list of
     * Film titles of each Actor in order to show them in the Films ListView.
     *
     */
    private void addSelectionListenerTable() {
        filmsTable.getSelectionModel().addListSelectionListener(new ListSelectionListener() {

            @Override
            public void valueChanged(ListSelectionEvent e) {

                if (modifyMode != ModifyMode.NORMAL_MODE) {
                    if (modifyMode != ModifyMode.DELETE_MODE) {
                        showRow(filmsTableModel.getTemporalFilmPos());
                    }
                } else {
                    if (filmsTable.getSelectedRow() != -1) {
                        Film f = filmsTableModel.getFilmAt(filmsTable.getSelectedRow());
                        
                        filmTitleTextField.setText(f.getTitle());
                        /*
                        Calendar cal = Calendar.getInstance();
                        cal.setTime(f.getReleaseYear());*/
                        filmReleaseYearSpinner.setValue(f.getReleaseYear());
                        filmLengthSpinner.setValue(f.getLength());
                        filmLanguageComboBox.getModel().setSelectedItem(f.getLanguageByLanguageId().getName());
                        filmRentalDurationSpinner.setValue(f.getRentalDuration());
                        filmRentalRateSpinner.setValue(f.getRentalRate());
                        filmReplacementCostSpinner.setValue(f.getReplacementCost());
                        filmDetailsTextArea.setText(f.getDescription());
                    }
                }
            }
        });
    }
    
    @Override
    public void onFindAll(List<Film> filmsList) {

        // TODO Threading? Loading actors takes time.
        filmsTableModel = new FilmClubFilmsTableModel(new ArrayList<>(filmsList));
        filmsTable.setModel(filmsTableModel);
        
        filmsComboBoxModel = new FilmClubFilmsComboBoxModel(new ArrayList<>(controller.getLanguages()));
        filmLanguageComboBox.setModel(filmsComboBoxModel);
        filmLanguageComboBox.setSelectedIndex(0);
        
        addSelectionListenerTable();
    }

    @Override
    public void onAddEntity(Film f) {
        filmsTableModel.addFilm(f);
    }

    @Override
    public void onUpdateEntity(Film f) {
        filmsTableModel.editFilm(filmsTableModel.getTemporalFilmPos(), f);
    }

    @Override
    public void onDeleteEntity(Film f) {

    }

}
