/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package filmclub.view;

import filmclub.controller.ActorsController;
import filmclub.controller.Controller;
import filmclub.model.Actor;
import filmclub.model.FilmActor;
import filmclub.observer.ViewObserver;
import java.awt.Component;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Objects;
import java.util.Set;
import java.util.function.Predicate;
import java.util.stream.Collectors;
import javax.swing.DefaultListModel;
import javax.swing.UIManager;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import static org.apache.commons.lang3.StringUtils.containsIgnoreCase;

/**
 *
 * @author gabag
 */
public class FilmClubActors extends javax.swing.JFrame implements ViewObserver<Actor> {

    private static FilmClubActors singleWindow = null;

    private ActorsController controller = null;

    private FilmClubActorsTableModel actorsTableModel;

    private ModifyMode modifyMode = ModifyMode.NORMAL_MODE;

    /**
     * Creates new form FilmClubActors
     */
    private FilmClubActors() {
        initComponents();
    }

    private FilmClubActors(ActorsController controller) {
        initComponents();
        this.controller = controller;
    }

    public static FilmClubActors getInstance() {
        if (singleWindow == null) {
            singleWindow = new FilmClubActors();
        }
        return singleWindow;
    }

    public Controller getController() {
        return this.controller;
    }

    public void setController(ActorsController controller) {
        this.controller = controller;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        filterPanel = new javax.swing.JPanel();
        filterLabel = new javax.swing.JLabel();
        filterComboBox = new javax.swing.JComboBox<>();
        actorIdLabel = new javax.swing.JLabel();
        actorFirstNameLabel = new javax.swing.JLabel();
        actorFirstNameTextField = new javax.swing.JTextField();
        actorLastNameLabel = new javax.swing.JLabel();
        actorLastNameTextField = new javax.swing.JTextField();
        filterButton = new javax.swing.JButton();
        actorIdSpinner = new javax.swing.JSpinner();
        filmTitleLabel = new javax.swing.JLabel();
        filmTitleTextField = new javax.swing.JTextField();
        tablesPanel = new javax.swing.JPanel();
        actorsScrollPane = new javax.swing.JScrollPane();
        actorsTable = new javax.swing.JTable();
        actorsTableLabel = new javax.swing.JLabel();
        filmsScrollPane = new javax.swing.JScrollPane();
        filmsList = new javax.swing.JList<>();
        filmsListLabel = new javax.swing.JLabel();
        actorsTableTipLabel = new javax.swing.JLabel();
        buttonsActorsPanel = new javax.swing.JPanel();
        addActorButton = new javax.swing.JButton();
        editActorButton = new javax.swing.JButton();
        deleteActorButton = new javax.swing.JButton();
        confirmButtonsActorsPanel = new javax.swing.JPanel();
        acceptButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("FilmClub Actors");
        setResizable(false);
        setSize(new java.awt.Dimension(750, 400));

        filterLabel.setText("Filter");

        filterComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Actor ID", "First name", "Last name", "Film title", "All" }));
        filterComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterComboBoxActionPerformed(evt);
            }
        });

        actorIdLabel.setText("Actor ID");

        actorFirstNameLabel.setText("First name");

        actorLastNameLabel.setText("Last name");

        filterButton.setText("Filter");
        filterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterButtonActionPerformed(evt);
            }
        });

        actorIdSpinner.setModel(new javax.swing.SpinnerNumberModel((short)1, (short)0, null, (short)1));

        filmTitleLabel.setText("Film title");

        javax.swing.GroupLayout filterPanelLayout = new javax.swing.GroupLayout(filterPanel);
        filterPanel.setLayout(filterPanelLayout);
        filterPanelLayout.setHorizontalGroup(
            filterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(filterPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(filterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(filterPanelLayout.createSequentialGroup()
                        .addComponent(filterLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(filterComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(actorIdLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(actorIdSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(actorFirstNameLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(actorFirstNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(actorLastNameLabel))
                    .addComponent(filmTitleLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(filterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(filmTitleTextField)
                    .addComponent(actorLastNameTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 100, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(filterButton)
                .addContainerGap())
        );
        filterPanelLayout.setVerticalGroup(
            filterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(filterPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(filterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(filterPanelLayout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addComponent(filterLabel))
                    .addGroup(filterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(filterComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(actorIdLabel)
                        .addComponent(actorFirstNameLabel)
                        .addComponent(actorFirstNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(actorLastNameLabel)
                        .addComponent(actorLastNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(filterButton)
                        .addComponent(actorIdSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(filterPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(filmTitleTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(filmTitleLabel))
                .addContainerGap(35, Short.MAX_VALUE))
        );

        actorsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Actor ID", "First name", "Last name"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        actorsTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        actorsScrollPane.setViewportView(actorsTable);
        if (actorsTable.getColumnModel().getColumnCount() > 0) {
            actorsTable.getColumnModel().getColumn(0).setResizable(false);
            actorsTable.getColumnModel().getColumn(1).setResizable(false);
            actorsTable.getColumnModel().getColumn(2).setResizable(false);
        }

        actorsTableLabel.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        actorsTableLabel.setText("Actors");

        filmsScrollPane.setViewportView(filmsList);

        filmsListLabel.setFont(new java.awt.Font("Dialog", 0, 24)); // NOI18N
        filmsListLabel.setText("Films");

        actorsTableTipLabel.setText("(click on an actor to show his/her films)");

        addActorButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/images/buttons/buttonAdd.png"))); // NOI18N
        addActorButton.setToolTipText("Add");
        addActorButton.setBorder(null);
        addActorButton.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                addActorButtonStateChanged(evt);
            }
        });
        addActorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addActorButtonActionPerformed(evt);
            }
        });

        editActorButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/images/buttons/buttonEdit.png"))); // NOI18N
        editActorButton.setToolTipText("Edit selected");
        editActorButton.setBorder(null);
        editActorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editActorButtonActionPerformed(evt);
            }
        });

        deleteActorButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/images/buttons/buttonDelete.png"))); // NOI18N
        deleteActorButton.setToolTipText("Delete selected");
        deleteActorButton.setBorder(null);
        deleteActorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActorButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout buttonsActorsPanelLayout = new javax.swing.GroupLayout(buttonsActorsPanel);
        buttonsActorsPanel.setLayout(buttonsActorsPanelLayout);
        buttonsActorsPanelLayout.setHorizontalGroup(
            buttonsActorsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(buttonsActorsPanelLayout.createSequentialGroup()
                .addComponent(addActorButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(editActorButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(deleteActorButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        buttonsActorsPanelLayout.setVerticalGroup(
            buttonsActorsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, buttonsActorsPanelLayout.createSequentialGroup()
                .addGap(0, 24, Short.MAX_VALUE)
                .addGroup(buttonsActorsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(editActorButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deleteActorButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addActorButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        acceptButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/images/buttons/buttonAccept.png"))); // NOI18N
        acceptButton.setToolTipText("Accept");
        acceptButton.setBorder(null);
        acceptButton.setEnabled(false);
        acceptButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                acceptButtonActionPerformed(evt);
            }
        });

        cancelButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/images/buttons/buttonCancel.png"))); // NOI18N
        cancelButton.setToolTipText("Cancel");
        cancelButton.setBorder(null);
        cancelButton.setEnabled(false);
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout confirmButtonsActorsPanelLayout = new javax.swing.GroupLayout(confirmButtonsActorsPanel);
        confirmButtonsActorsPanel.setLayout(confirmButtonsActorsPanelLayout);
        confirmButtonsActorsPanelLayout.setHorizontalGroup(
            confirmButtonsActorsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(confirmButtonsActorsPanelLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(acceptButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        confirmButtonsActorsPanelLayout.setVerticalGroup(
            confirmButtonsActorsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(confirmButtonsActorsPanelLayout.createSequentialGroup()
                .addGroup(confirmButtonsActorsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(acceptButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cancelButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 15, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout tablesPanelLayout = new javax.swing.GroupLayout(tablesPanel);
        tablesPanel.setLayout(tablesPanelLayout);
        tablesPanelLayout.setHorizontalGroup(
            tablesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tablesPanelLayout.createSequentialGroup()
                .addGroup(tablesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(tablesPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(tablesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(actorsScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(tablesPanelLayout.createSequentialGroup()
                                .addGroup(tablesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tablesPanelLayout.createSequentialGroup()
                                        .addComponent(actorsTableTipLabel)
                                        .addGap(24, 24, 24))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tablesPanelLayout.createSequentialGroup()
                                        .addComponent(actorsTableLabel)
                                        .addGap(85, 85, 85)))
                                .addComponent(buttonsActorsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tablesPanelLayout.createSequentialGroup()
                        .addGap(357, 357, 357)
                        .addComponent(confirmButtonsActorsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 53, Short.MAX_VALUE)
                .addGroup(tablesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(filmsScrollPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tablesPanelLayout.createSequentialGroup()
                        .addComponent(filmsListLabel)
                        .addGap(95, 95, 95)))
                .addContainerGap())
        );
        tablesPanelLayout.setVerticalGroup(
            tablesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tablesPanelLayout.createSequentialGroup()
                .addGroup(tablesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tablesPanelLayout.createSequentialGroup()
                        .addGroup(tablesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(actorsTableLabel)
                            .addComponent(filmsListLabel))
                        .addComponent(actorsTableTipLabel))
                    .addComponent(buttonsActorsPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(tablesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(actorsScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(filmsScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(confirmButtonsActorsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(filterPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(tablesPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(filterPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tablesPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private Actor editingActor;

    private void showRow(int pos) {
        actorsTable.setRowSelectionInterval(pos, pos);
        actorsTable.scrollRectToVisible(actorsTable.getCellRect(pos, 1, true));
    }

    private void addActorButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addActorButtonActionPerformed
        // TODO add your handling code here:

        modifyMode = ModifyMode.ADD_MODE;
        setEditingMode(true);

        editingActor = new Actor("", "", new Date());
        actorsTableModel.addActor(editingActor);

        int lastPos = actorsTableModel.getActors().size() - 1;

        actorsTableModel.setRowEditable(lastPos, true);
        actorsTableModel.setTemporalActor(lastPos);
    }//GEN-LAST:event_addActorButtonActionPerformed

    private void editActorButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editActorButtonActionPerformed
        // TODO add your handling code here:
        if (actorsTable.getSelectedRow() != -1) {
            modifyMode = ModifyMode.EDIT_MODE;
            setEditingMode(true);
            showRow(actorsTable.getSelectedRow());
            actorsTableModel.setRowEditable(actorsTable.getSelectedRow(), true);

            actorsTableModel.setTemporalActor(actorsTable.getSelectedRow());
        }
    }//GEN-LAST:event_editActorButtonActionPerformed

    private void deleteActorButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActorButtonActionPerformed
        // TODO add your handling code here:
        if (actorsTable.getSelectedRow() != -1) {
            modifyMode = ModifyMode.DELETE_MODE;
            setEditingMode(true);

            int pos = actorsTable.getSelectedRow();
            showRow(pos);

            actorsTableModel.setTemporalActor(actorsTableModel.getActorAt(pos), pos);
            actorsTableModel.removeActor(pos);
        }
    }//GEN-LAST:event_deleteActorButtonActionPerformed

    private void acceptButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_acceptButtonActionPerformed
        // TODO add your handling code here:

        setEditingMode(false);
        actorsTableModel.setRowEditable(actorsTable.getSelectedRow(), false);

        Actor actor;

        switch (modifyMode) {
            case ADD_MODE:
                actor = actorsTableModel.getActorAt(actorsTableModel.getActors().size() - 1);
                actorsTableModel.rollback(modifyMode);
                controller.addEntity(actor);
                break;
            case EDIT_MODE:
                actor = actorsTableModel.getActorAt(actorsTable.getSelectedRow());
                controller.updateEntity(actor);
                break;
            case DELETE_MODE:
                actor = actorsTableModel.getTemporalActor();
                controller.deleteEntity(actor);
                break;
        }
        
        /*
        IMPORTANT!! If you press the Accept button while editing the selected 
        row, it stays in editing mode, allowing you to change its content even 
        if the model has already registered that particular cell as not editable. 
        
        We have to fire the editingCanceled event programatically to prevent that.
        */
        actorsTable.editingCanceled(null);

        modifyMode = ModifyMode.NORMAL_MODE;
    }//GEN-LAST:event_acceptButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        // TODO add your handling code here:

        setEditingMode(false);
        actorsTableModel.setRowEditable(actorsTable.getSelectedRow(), false);

        if (modifyMode != ModifyMode.NORMAL_MODE) {
            actorsTableModel.rollback(modifyMode);
        }

        /*
        IMPORTANT!! If you press the Cancel button while editing the selected 
        row, it stays in editing mode, allowing you to change its content even 
        if the model has already registered that particular cell as not editable. 
        
        We have to fire the editingCanceled event programatically to prevent that.
        */
        actorsTable.editingCanceled(null);
        
        modifyMode = ModifyMode.NORMAL_MODE;

    }//GEN-LAST:event_cancelButtonActionPerformed

    private boolean filterActorId(Actor t) {
        return Objects.equals(t.getActorId(), actorIdSpinner.getValue());
    }

    /**
     * Filters Actors using the First name text field. Using an external library
     * from Apache Commons because the String.toUpperCase and String.contains
     * approach to compare two strings ignoring their case would have problems
     * with some Unicode characters.
     *
     * https://stackoverflow.com/questions/6991038/case-insensitive-storage-and-unicode-compatibility/6996550#6996550
     *
     * @param t the Actor to filter
     * @return true if the Actor first name contains the input from the filter
     * text field.
     */
    private boolean filterActorFirstName(Actor t) {
        return containsIgnoreCase(t.getFirstName(), actorFirstNameTextField.getText());
    }

    private boolean filterActorLastName(Actor t) {
        return containsIgnoreCase(t.getLastName(), actorLastNameTextField.getText());
    }

    /**
     * Filters Actors by a certain Film title on which they appear.
     * 
     * @param t
     * @return 
     */
    private boolean filterActorFilmTitle(Actor t) {
        return t.getFilmActors().stream().anyMatch((FilmActor fa) -> 
                containsIgnoreCase(fa.getFilm().getTitle(), filmTitleTextField.getText()));
    }
    
    /**
     * Applies the selected filter from the combo box to the actors table, using
     * the content of the filter text fields. The Actor ID is an exclusive
     * filter, meaning it is unique to each Actor, so it isn't used when
     * applying the "All" filter.
     *
     * @param evt
     */
    private void filterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filterButtonActionPerformed
        // TODO add your handling code here:

        Predicate<Actor> filter = null;

        // filterComboBox filters
        switch (filterComboBox.getSelectedIndex()) {
            case 0:
                // Actor ID
                filter = (Actor t) -> filterActorId(t);
                break;
            case 1:
                // Actor first name
                filter = (Actor t) -> filterActorFirstName(t);
                break;
            case 2:
                // Actor last name
                filter = (Actor t) -> filterActorLastName(t);
                break;
            case 3:
                filter = (Actor t) -> filterActorFilmTitle(t);
                break;
            case 4:
                // All filters (first + last name + film title)
                filter = (Actor t) -> filterActorFirstName(t) && filterActorLastName(t) && filterActorFilmTitle(t);
                break;
            default:
                break;
        }

        if (filter != null) {
            actorsTableModel.setActors(controller.getActors().stream().filter(filter).collect(Collectors.toList()));
        }
    }//GEN-LAST:event_filterButtonActionPerformed

    /**
     * Disables the Actor ID input field if the "All" filter is selected.
     *
     * @param evt
     */
    private void filterComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filterComboBoxActionPerformed
        // TODO add your handling code here:

        switch (filterComboBox.getSelectedIndex()) {
            case 0:
                actorIdSpinner.setEnabled(true);
                break;
            case 4:
                actorIdSpinner.setEnabled(false);
                break;
            default:
                break;
        }
    }//GEN-LAST:event_filterComboBoxActionPerformed

    /**
     * 
     * This method responds to the need of selecting the newly added actor to the 
     * table. In the addActorButtonActionPerformed event handler is not possible 
     * to select the new table row because the window focus is locked in the add 
     * button being pressed, so we have to handle the StateChanged event directly.
     * Whether the add button is pressed via mouse or keyboard, selects the 
     * created film in the table.
     * 
     * @param evt 
     */
    private void addActorButtonStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_addActorButtonStateChanged
        // TODO add your handling code here:
        if (modifyMode == ModifyMode.ADD_MODE && !addActorButton.getModel().isPressed()) {
            int lastPos = actorsTableModel.getActors().size() - 1;
            showRow(lastPos);
        }
    }//GEN-LAST:event_addActorButtonStateChanged

    private void setEditingMode(boolean b) {
        for (Component c: filterPanel.getComponents())
            c.setEnabled(!b);
        
        for (Component c: buttonsActorsPanel.getComponents())
            c.setEnabled(!b);

        for (Component c: confirmButtonsActorsPanel.getComponents())
            c.setEnabled(b);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FilmClubActors.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FilmClubActors.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FilmClubActors.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FilmClubActors.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FilmClubActors().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton acceptButton;
    private javax.swing.JLabel actorFirstNameLabel;
    private javax.swing.JTextField actorFirstNameTextField;
    private javax.swing.JLabel actorIdLabel;
    private javax.swing.JSpinner actorIdSpinner;
    private javax.swing.JLabel actorLastNameLabel;
    private javax.swing.JTextField actorLastNameTextField;
    private javax.swing.JScrollPane actorsScrollPane;
    private javax.swing.JTable actorsTable;
    private javax.swing.JLabel actorsTableLabel;
    private javax.swing.JLabel actorsTableTipLabel;
    private javax.swing.JButton addActorButton;
    private javax.swing.JPanel buttonsActorsPanel;
    private javax.swing.JButton cancelButton;
    private javax.swing.JPanel confirmButtonsActorsPanel;
    private javax.swing.JButton deleteActorButton;
    private javax.swing.JButton editActorButton;
    private javax.swing.JLabel filmTitleLabel;
    private javax.swing.JTextField filmTitleTextField;
    private javax.swing.JList<String> filmsList;
    private javax.swing.JLabel filmsListLabel;
    private javax.swing.JScrollPane filmsScrollPane;
    private javax.swing.JButton filterButton;
    private javax.swing.JComboBox<String> filterComboBox;
    private javax.swing.JLabel filterLabel;
    private javax.swing.JPanel filterPanel;
    private javax.swing.JPanel tablesPanel;
    // End of variables declaration//GEN-END:variables

    /**
     *
     * Adds a selection listener to the table, allowing to recover the list of
     * Film titles of each Actor in order to show them in the Films ListView.
     *
     */
    private void addSelectionListenerTable() {
        actorsTable.getSelectionModel().addListSelectionListener(new ListSelectionListener() {

            @Override
            public void valueChanged(ListSelectionEvent e) {

                if (modifyMode != ModifyMode.NORMAL_MODE) {
                    if (modifyMode != ModifyMode.DELETE_MODE) {
                        showRow(actorsTableModel.getTemporalActorPos());
                    }
                } else {
                    if (actorsTable.getSelectedRow() != -1) {
                        // First we get the set of FilmActor items of the selected Actor.
                        Set<FilmActor> filmActorSet = actorsTableModel.
                                getActorAt(actorsTable.getSelectedRow()).getFilmActors();

                        /*
                        Then, we create a list model and add to it every Film titles 
                        from the selected Actor.
                         */
                        DefaultListModel filmsListModel = new DefaultListModel();

                        filmActorSet.forEach((fa) -> {
                            filmsListModel.addElement(fa.getFilm().getTitle());
                        });
                        filmsList.setModel(filmsListModel);
                    }
                }
            }
        });
    }

    @Override
    public void onFindAll(List<Actor> actorsList) {

        // TODO Threading? Loading actors takes time.
        actorsTableModel = new FilmClubActorsTableModel(new ArrayList<>(actorsList));
        actorsTable.setModel(actorsTableModel);
        addSelectionListenerTable();

    }

    @Override
    public void onAddEntity(Actor a) {
        actorsTableModel.addActor(a);
    }

    @Override
    public void onUpdateEntity(Actor a) {
        actorsTableModel.editActor(actorsTableModel.getTemporalActorPos(), a);
    }

    @Override
    public void onDeleteEntity(Actor a) {

    }

}
